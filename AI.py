
# # ============================================================================
# # Algebraic Immunity for 8x8 S-boxes — BOTH notions:
# #   (A) AI_comp(S):  min_a AI(<a,S>)    [component algebraic immunity]
# #   (B) AI_gr(S):    min d: ∃ g(x,y)≠0, deg(g)≤d, g(x,S(x))=0  [graph AI]

# # ----------------------- INPUT S-BOX -----------------------
# USE_AES_DEFAULT = True

#AI=2 , in paper
MDPISBOX = [
   0x01, 0x11, 0x91, 0xE1, 0xD1, 0xB1, 0x71, 0x61, 0xF1, 0x21, 0xC1, 0x51, 0xA1, 0x41, 0x31, 0x81,
   0x00, 0x10, 0x93, 0xE2, 0xD5, 0xB4, 0x77, 0x66, 0xF9, 0x28, 0xCB, 0x5A, 0xAD, 0x4C, 0x3F, 0x8E,
   0x08, 0x2C, 0x18, 0xF5, 0x90, 0x5D, 0xE9, 0xC4, 0xD3, 0x4E, 0xBA, 0xA7, 0x72, 0x8F, 0x6B, 0x36,
   0x0F, 0x3A, 0x84, 0x1F, 0x4B, 0xE0, 0x9E, 0xA5, 0x26, 0x6D, 0x73, 0xF8, 0xDC, 0xC7, 0x59, 0xB2,
   0x0C, 0x4F, 0x2E, 0xD0, 0x1C, 0xA2, 0xF3, 0xBD, 0x98, 0x86, 0x57, 0x79, 0xE5, 0x3B, 0xCA, 0x64,
   0x0A, 0x58, 0xB0, 0x39, 0xC3, 0x1A, 0x82, 0xDB, 0x65, 0xAC, 0x94, 0x2D, 0x47, 0x7E, 0xF6, 0xEF,
   0x06, 0x67, 0x3D, 0x2B, 0x8A, 0xFC, 0x16, 0x70, 0x44, 0xC2, 0xE8, 0xDE, 0x9F, 0xB9, 0xA3, 0x55,
   0x07, 0x76, 0xAF, 0xC8, 0x5E, 0x49, 0x60, 0x17, 0xBC, 0xEB, 0x22, 0x85, 0x33, 0xF4, 0x9D, 0xDA,
   0x0E, 0x8B, 0x46, 0x9C, 0x2F, 0x75, 0xD8, 0x52, 0x1E, 0x34, 0xA9, 0xE3, 0xF0, 0x6A, 0xB7, 0xCD,
   0x03, 0x95, 0xD9, 0x7D, 0xF2, 0xC6, 0xAA, 0x3E, 0xE7, 0x13, 0x6F, 0xBB, 0x54, 0x20, 0x8C, 0x48,
   0x0D, 0xAE, 0x5C, 0x63, 0xB8, 0x27, 0x35, 0x9A, 0xC0, 0x7F, 0x1D, 0x42, 0x89, 0xE6, 0xD4, 0xFB,
   0x04, 0xB3, 0xC5, 0x87, 0x69, 0x9B, 0x4D, 0xFF, 0x32, 0x50, 0xD6, 0x14, 0x2A, 0xA8, 0xEE, 0x7C,
   0x0B, 0xC9, 0x62, 0x4A, 0x37, 0xDF, 0x24, 0xEC, 0x8D, 0xB5, 0xFE, 0x96, 0x1B, 0x53, 0x78, 0xA0,
   0x05, 0xD2, 0xF7, 0xA4, 0xED, 0x6E, 0x5B, 0x88, 0x7A, 0x99, 0x3C, 0xCF, 0xB6, 0x15, 0x40, 0x23,
   0x02, 0xE4, 0x7B, 0xBE, 0xA6, 0x83, 0xCC, 0x29, 0x5F, 0xFA, 0x45, 0x30, 0x68, 0xDD, 0x12, 0x97,
   0x09, 0xFD, 0xEA, 0x56, 0x74, 0x38, 0xBF, 0x43, 0xAB, 0xD7, 0x80, 0x6C, 0xCE, 0x92, 0x25, 0x19]
 # AI=3 when aiming to optimize this parameterr)
MDPISBOX2 =[
    0x01, 0x11, 0x91, 0xE1, 0xD1, 0xB1, 0x71, 0x61, 0xF1, 0x21, 0xC1, 0x51, 0xA1, 0x41, 0x31, 0x81,
    0x00, 0x10, 0xE4, 0x95, 0xB3, 0xD2, 0x76, 0x67, 0x8B, 0x3A, 0xAE, 0x4F, 0xC9, 0x58, 0x2C, 0xFD,
    0x08, 0x2F, 0xF2, 0x1C, 0x5E, 0x90, 0xED, 0xC3, 0x37, 0x69, 0x74, 0x8A, 0xB8, 0xA6, 0x4B, 0xD5,
    0x0F, 0x38, 0x1A, 0x83, 0xE0, 0x49, 0x9B, 0xA2, 0xB4, 0x5D, 0xDF, 0xC6, 0x75, 0xFC, 0x6E, 0x27,
    0x0C, 0x4A, 0xD0, 0x2B, 0xA4, 0x1F, 0xF5, 0xBE, 0x63, 0xC8, 0xE2, 0x39, 0x56, 0x7D, 0x87, 0x9C,
    0x0A, 0x5C, 0x3D, 0xB0, 0x18, 0xC5, 0x84, 0xD9, 0xEA, 0xF7, 0x46, 0x7B, 0x93, 0x2E, 0xAF, 0x62,
    0x06, 0x66, 0x29, 0x3E, 0xFF, 0x88, 0x17, 0x70, 0x52, 0xA5, 0x9A, 0xBD, 0xEC, 0xDB, 0xC4, 0x43,
    0x07, 0x77, 0xCC, 0xAA, 0x4D, 0x5B, 0x60, 0x16, 0xD8, 0x9E, 0x35, 0xF3, 0x24, 0x82, 0xE9, 0xBF,
    0x0E, 0x89, 0x9F, 0x47, 0x72, 0x2A, 0xDC, 0x54, 0xCE, 0xB6, 0xF0, 0x68, 0xAD, 0xE5, 0x33, 0x1B,
    0x03, 0x92, 0x7E, 0xDD, 0xC7, 0xF4, 0xA8, 0x3B, 0x4C, 0x8F, 0x53, 0x20, 0x6A, 0xB9, 0x15, 0xE6,
    0x0D, 0xAB, 0x65, 0x5F, 0x26, 0xBC, 0x32, 0x98, 0xF9, 0xD3, 0x8D, 0xE7, 0x1E, 0x44, 0x7A, 0xC0,
    0x04, 0xB5, 0x86, 0xC2, 0x99, 0x6D, 0x4E, 0xFA, 0x7F, 0xEB, 0x28, 0xAC, 0xD7, 0x13, 0x50, 0x34,
    0x0B, 0xCD, 0x48, 0x64, 0xDA, 0x36, 0x23, 0xEF, 0xA0, 0x7C, 0x19, 0x55, 0xFB, 0x97, 0xB2, 0x8E,
    0x05, 0xD4, 0xA3, 0xF6, 0x6B, 0xEE, 0x59, 0x8C, 0x25, 0x40, 0xB7, 0x12, 0x3F, 0xCA, 0x9D, 0x78,
    0x02, 0xE3, 0xBB, 0x79, 0x85, 0xA7, 0xCF, 0x2D, 0x96, 0x14, 0x6C, 0xDE, 0x42, 0x30, 0xF8, 0x5A,
    0x09, 0xFE, 0x57, 0xE8, 0x3C, 0x73, 0xBA, 0x45, 0x1D, 0x22, 0xCB, 0x94, 0x80, 0x6F, 0xD6, 0xA9,
]

#AES AI=2
AES = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


from itertools import combinations
from typing import List, Tuple

# --------------------------- GF(2) Linear Algebra ---------------------------

def gf2_rank(rows: List[int]) -> int:

    basis: List[int] = []
    for v in rows:
        x = v
        # Reduce x by current basis (pivot by highest set bit)
        for b in basis:
            if x == 0:
                break
            hb_x = x.bit_length()
            hb_b = b.bit_length()
            if hb_x == hb_b:
                x ^= b
            elif hb_x < hb_b:
                continue
        if x:
            basis.append(x)
            # Keep basis ordered by decreasing highest-bit position to speed up reduction
            basis.sort(key=lambda z: z.bit_length(), reverse=True)
    return len(basis)

# ----------------------------- Monomial Handling ----------------------------

def monomials_xy_masks_upto_deg(nx: int, ny: int, d: int) -> List[Tuple[int, int]]:

    mons: List[Tuple[int, int]] = []
    for wx in range(0, min(d, nx) + 1):
        for X in combinations(range(nx), wx):
            mask_x = 0
            for i in X:
                mask_x |= (1 << i)
            # For each chosen x-weight wx, choose y-weight wy so that wx + wy ≤ d
            for wy in range(0, min(d - wx, ny) + 1):
                for Y in combinations(range(ny), wy):
                    mask_y = 0
                    for j in Y:
                        mask_y |= (1 << j)
                    mons.append((mask_x, mask_y))
    return mons

def build_rows_graph_annihilator(sbox: List[int], mons_xy: List[Tuple[int, int]]) -> List[int]:

    rows: List[int] = []
    for x in range(256):
        y = sbox[x]
        row = 0
        for j, (mx, my) in enumerate(mons_xy):
            # monomial equals 1 iff all variables in its support are 1
            if (x & mx) == mx and (y & my) == my:
                row |= (1 << j)
        rows.append(row)
    return rows

# ------------------------------ Core Computation ----------------------------

def sbox_ai_graph(sbox: List[int], max_degree: int = 4) -> Tuple[int, int]:

    if len(sbox) != 256:
        raise ValueError("S-box must have exactly 256 entries (integers in [0..255]).")
    if any((v < 0 or v > 255) for v in sbox):
        raise ValueError("All S-box entries must be integers in [0..255].")

    nx = ny = 8  # x has 8 vars, y has 8 vars
    for d in range(0, max_degree + 1):
        mons = monomials_xy_masks_upto_deg(nx, ny, d)
        mcols = len(mons)
        rows = build_rows_graph_annihilator(sbox, mons)
        rnk = gf2_rank(rows)
        if rnk < mcols:
            # Nontrivial nullspace exists => graph annihilator(s) of degree ≤ d found
            return d, (mcols - rnk)
    return max_degree + 1, 0

# ------------------------------------ Main -----------------------------------

def main():

    SBOX = MDPISBOX
    ai_gr, nullity = sbox_ai_graph(SBOX, max_degree=4)
    print("==== Graph Algebraic Immunity ====")
    print(f"AI_gr(S)          : {ai_gr}")
    print(f"Nullity (solutions): {nullity}")

if __name__ == "__main__":
    main()
