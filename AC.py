AES_SBOX = [
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
]

MDPISBOX = [
  0x01, 0x11, 0x91, 0xE1, 0xD1, 0xB1, 0x71, 0x61, 0xF1, 0x21, 0xC1, 0x51, 0xA1, 0x41, 0x31, 0x81,
  0x00, 0x10, 0x93, 0xE2, 0xD5, 0xB4, 0x77, 0x66, 0xF9, 0x28, 0xCB, 0x5A, 0xAD, 0x4C, 0x3F, 0x8E,
  0x08, 0x2C, 0x18, 0xF5, 0x90, 0x5D, 0xE9, 0xC4, 0xD3, 0x4E, 0xBA, 0xA7, 0x72, 0x8F, 0x6B, 0x36,
  0x0F, 0x3A, 0x84, 0x1F, 0x4B, 0xE0, 0x9E, 0xA5, 0x26, 0x6D, 0x73, 0xF8, 0xDC, 0xC7, 0x59, 0xB2,
  0x0C, 0x4F, 0x2E, 0xD0, 0x1C, 0xA2, 0xF3, 0xBD, 0x98, 0x86, 0x57, 0x79, 0xE5, 0x3B, 0xCA, 0x64,
  0x0A, 0x58, 0xB0, 0x39, 0xC3, 0x1A, 0x82, 0xDB, 0x65, 0xAC, 0x94, 0x2D, 0x47, 0x7E, 0xF6, 0xEF,
  0x06, 0x67, 0x3D, 0x2B, 0x8A, 0xFC, 0x16, 0x70, 0x44, 0xC2, 0xE8, 0xDE, 0x9F, 0xB9, 0xA3, 0x55,
  0x07, 0x76, 0xAF, 0xC8, 0x5E, 0x49, 0x60, 0x17, 0xBC, 0xEB, 0x22, 0x85, 0x33, 0xF4, 0x9D, 0xDA,
  0x0E, 0x8B, 0x46, 0x9C, 0x2F, 0x75, 0xD8, 0x52, 0x1E, 0x34, 0xA9, 0xE3, 0xF0, 0x6A, 0xB7, 0xCD,
  0x03, 0x95, 0xD9, 0x7D, 0xF2, 0xC6, 0xAA, 0x3E, 0xE7, 0x13, 0x6F, 0xBB, 0x54, 0x20, 0x8C, 0x48,
  0x0D, 0xAE, 0x5C, 0x63, 0xB8, 0x27, 0x35, 0x9A, 0xC0, 0x7F, 0x1D, 0x42, 0x89, 0xE6, 0xD4, 0xFB,
  0x04, 0xB3, 0xC5, 0x87, 0x69, 0x9B, 0x4D, 0xFF, 0x32, 0x50, 0xD6, 0x14, 0x2A, 0xA8, 0xEE, 0x7C,
  0x0B, 0xC9, 0x62, 0x4A, 0x37, 0xDF, 0x24, 0xEC, 0x8D, 0xB5, 0xFE, 0x96, 0x1B, 0x53, 0x78, 0xA0,
  0x05, 0xD2, 0xF7, 0xA4, 0xED, 0x6E, 0x5B, 0x88, 0x7A, 0x99, 0x3C, 0xCF, 0xB6, 0x15, 0x40, 0x23,
  0x02, 0xE4, 0x7B, 0xBE, 0xA6, 0x83, 0xCC, 0x29, 0x5F, 0xFA, 0x45, 0x30, 0x68, 0xDD, 0x12, 0x97,
  0x09, 0xFD, 0xEA, 0x56, 0x74, 0x38, 0xBF, 0x43, 0xAB, 0xD7, 0x80, 0x6C, 0xCE, 0x92, 0x25, 0x19,
]
from typing import List, Tuple, Optional, Callable

# ------------------- Config -------------------
MOD_POLY = 0x11B   # AES polynomial (change to 0x11D to compare)
USE_AES_DEFAULT = True

# ------------------- Helpers: GF(2^8) -------------------
def gf_mul(a: int, b: int, mod: int = MOD_POLY) -> int:
    a &= 0xFF; b &= 0xFF
    res = 0
    red = mod & 0xFF
    for _ in range(8):
        if b & 1:
            res ^= a
        b >>= 1
        carry = a & 0x80
        a = ((a << 1) & 0xFF)
        if carry:
            a ^= red
    return res

def gf_pow(a: int, e: int, mod: int = MOD_POLY) -> int:
    a &= 0xFF
    r = 1
    while e:
        if e & 1:
            r = gf_mul(r, a, mod)
        a = gf_mul(a, a, mod)
        e >>= 1
    return r

def gf_inv(a: int, mod: int = MOD_POLY) -> int:
    if a == 0:
        raise ZeroDivisionError("No inverse for 0 in GF(2^8)")
    return gf_pow(a, 254, mod)  # |GF(2^8)^*| = 255

def poly_eval_coeffs(coeffs: List[int], x: int, mod: int = MOD_POLY) -> int:
    # Horner over GF(2^8)
    acc = 0
    for i in reversed(range(len(coeffs))):
        acc = gf_mul(acc, x, mod) ^ (coeffs[i] & 0xFF)
    return acc & 0xFF

# ------------------- Interpolation (univariate) -------------------
def collect_samples(sbox: List[int]) -> Tuple[List[int], List[int]]:
    if len(sbox) != 256:
        raise ValueError("SBOX must have 256 entries.")
    for v in sbox:
        if not (0 <= v <= 255):
            raise ValueError("SBOX values must be in [0..255].")
    xs = list(range(256))
    ys = sbox[:]
    return xs, ys

def solve_vandermonde(xs: List[int], ys: List[int], mod_poly: int = MOD_POLY) -> List[int]:
    n = 256
    # Build Vandermonde V and RHS y
    V = [[0]*n for _ in range(n)]
    y = ys[:]

    for r, x in enumerate(xs):
        V[r][0] = 1
        if x == 0:
            for c in range(1, n): V[r][c] = 0
        else:
            p = 1
            for c in range(1, n):
                p = gf_mul(p, x, mod_poly)
                V[r][c] = p

    # Gauss–Jordan elimination in GF(2^8)
    row = 0
    for col in range(n):
        piv = None
        for r in range(row, n):
            if V[r][col] != 0:
                piv = r; break
        if piv is None:
            continue
        if piv != row:
            V[row], V[piv] = V[piv], V[row]
            y[row], y[piv] = y[piv], y[row]
        inv = gf_inv(V[row][col], mod_poly)
        for c in range(col, n):
            V[row][c] = gf_mul(V[row][c], inv, mod_poly)
        y[row] = gf_mul(y[row], inv, mod_poly)
        for r in range(n):
            if r == row: continue
            f = V[r][col]
            if f:
                for c in range(col, n):
                    V[r][c] ^= gf_mul(f, V[row][c], mod_poly)
                y[r] ^= gf_mul(f, y[row], mod_poly)
        row += 1
        if row == n: break

    a = [v & 0xFF for v in y]  # coefficients a0..a255
    return a

def ac_univariate(sbox: List[int], mod_poly: int = MOD_POLY) -> Tuple[int,int,bool,List[int]]:
    xs, ys = collect_samples(sbox)
    coeffs = solve_vandermonde(xs, ys, mod_poly)
    ac_incl_a0 = sum(1 for c in coeffs if c != 0)
    ac_excl_a0 = sum(1 for c in coeffs[1:] if c != 0)
    # verify
    ok = True
    for x in range(256):
        if poly_eval_coeffs(coeffs, x, mod_poly) != ys[x]:
            ok = False; break
    return ac_excl_a0, ac_incl_a0, ok, coeffs

# ------------------- ANF (Boolean) -------------------
def bit(x: int, i: int) -> int:
    return (x >> i) & 1

def anf_coefficients(truth_table: List[int]) -> List[int]:
    # Möbius transform (in-place variant on a copy)
    coeffs = truth_table[:]
    n = 8
    for i in range(n):
        step = 1 << i
        for j in range(256):
            if (j & step) != 0:
                coeffs[j] ^= coeffs[j ^ step]
    return coeffs

def ac_anf(sbox: List[int]):
    if len(sbox) != 256:
        raise ValueError("SBOX must have 256 entries.")
    total_terms = 0
    max_degree = 0
    terms_per_bit = []
    deg_per_bit = []

    for out_bit in range(8):
        tt = [bit(sbox[x], out_bit) for x in range(256)]
        coeffs = anf_coefficients(tt)
        cnt = sum(coeffs)
        terms_per_bit.append(cnt)
        total_terms += cnt

        deg = 0
        for u, c in enumerate(coeffs):
            if c:
                w = (u & 0xFF).bit_count()
                if w > deg:
                    deg = w
        deg_per_bit.append(deg)
        if deg > max_degree:
            max_degree = deg

    return total_terms, terms_per_bit, max_degree, deg_per_bit

# ------------------- Main -------------------
def main():
    # ====== INPUT SBOX ======
    if USE_AES_DEFAULT:
        SBOX = MDPISBOX     # dùng AES mặc định
    else:
         SBOX = [i for i in range(256)]


    # ----- (A) AC_univariate over GF(2^8) -----
    ac_excl_a0, ac_incl_a0, ok, coeffs = ac_univariate(SBOX, MOD_POLY)

    # ----- (B) AC_ANF (Boolean) -----
    total_terms, terms_per_bit, max_deg, deg_bits = ac_anf(SBOX)

    # ----- Print -----
    print("========== INPUT ==========")
    print(f"Using AES S-box: {USE_AES_DEFAULT}")
    print(f"GF(2^8) modulus: 0x{MOD_POLY:03X}")
    print("========== AC (univariate over GF(2^8)) ==========")
    print(f"AC  {ac_incl_a0} ")
    print(f"Interpolation verification: {'OK' if ok else 'FAILED'}")
    # Uncomment to inspect a slice of coefficients:
    # print('a0..a15   =', [f'0x{c:02X}' for c in coeffs[:16]])
    # print('a240..255 =', [f'0x{c:02X}' for c in coeffs[240:]])

    print("========== AC (ANF / Boolean) ==========")
    print(f"Total ANF terms (8 bits): {total_terms}")
    print(f"Terms per output bit   : {terms_per_bit}")
    print(f"Max algebraic degree   : {max_deg}")
    print(f"Degree per output bit  : {deg_bits}")

if __name__ == "__main__":
    main()
