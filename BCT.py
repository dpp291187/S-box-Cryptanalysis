
MKV =[
    0x01, 0x11, 0x91, 0xE1, 0xD1, 0xB1, 0x71, 0x61,
    0xF1, 0x21, 0xC1, 0x51, 0xA1, 0x41, 0x31, 0x81,
    0x00, 0x10, 0xE3, 0x92, 0xB5, 0xD4, 0x77, 0x66,
    0x89, 0x38, 0xAB, 0x4A, 0xCD, 0x5C, 0x2F, 0xFE,
    0x08, 0x5F, 0x3E, 0xB0, 0x1C, 0xC2, 0x83, 0xDD,
    0xE8, 0xF6, 0x47, 0x79, 0x95, 0x2B, 0xAA, 0x64,
    0x0F, 0x48, 0xD0, 0x29, 0xA3, 0x1A, 0xF2, 0xBB,
    0x65, 0xCC, 0xE4, 0x3D, 0x57, 0x7E, 0x86, 0x9F,
    0x0C, 0x2A, 0xF4, 0x1F, 0x5B, 0x90, 0xEE, 0xC5,
    0x36, 0x6D, 0x73, 0x88, 0xBC, 0xA7, 0x49, 0xD2,
    0x0A, 0x3C, 0x18, 0x85, 0xE0, 0x4D, 0x99, 0xA4,
    0xB3, 0x5E, 0xDA, 0xC7, 0x72, 0xFF, 0x6B, 0x26,
    0x06, 0x76, 0xCF, 0xA8, 0x4E, 0x59, 0x60, 0x17,
    0xDC, 0x9B, 0x32, 0xF5, 0x23, 0x84, 0xED, 0xBA,
    0x07, 0x67, 0x2D, 0x3B, 0xFA, 0x8C, 0x16, 0x70,
    0x54, 0xA2, 0x98, 0xBE, 0xEF, 0xD9, 0xC3, 0x45,
    0x0E, 0xA9, 0x62, 0x5A, 0x27, 0xBF, 0x34, 0x9C,
    0xFD, 0xD5, 0x8E, 0xE6, 0x1B, 0x43, 0x78, 0xC0,
    0x03, 0xB2, 0x87, 0xC4, 0x9D, 0x6E, 0x4B, 0xF8,
    0x7A, 0xE9, 0x2C, 0xAF, 0xD6, 0x15, 0x50, 0x33,
    0x0D, 0xFB, 0x56, 0xEC, 0x3F, 0x75, 0xB8, 0x42,
    0x1E, 0x24, 0xC9, 0x93, 0x80, 0x6A, 0xD7, 0xAD,
    0x04, 0xE5, 0xB9, 0x7D, 0x82, 0xA6, 0xCA, 0x2E,
    0x97, 0x13, 0x6F, 0xDB, 0x44, 0x30, 0xFC, 0x58,
    0x0B, 0x8D, 0x9A, 0x46, 0x74, 0x28, 0xDF, 0x53,
    0xCB, 0xB7, 0xF0, 0x6C, 0xAE, 0xE2, 0x35, 0x19,
    0x05, 0x94, 0x7B, 0xDE, 0xC6, 0xF3, 0xAC, 0x39,
    0x4F, 0x8A, 0x55, 0x20, 0x68, 0xBD, 0x12, 0xE7,
    0x02, 0xD3, 0xA5, 0xF7, 0x69, 0xEB, 0x5D, 0x8F,
    0x22, 0x40, 0xB6, 0x14, 0x3A, 0xC8, 0x9E, 0x7C,
    0x09, 0xCE, 0x4C, 0x63, 0xD8, 0x37, 0x25, 0xEA,
    0xA0, 0x7F, 0x1D, 0x52, 0xF9, 0x96, 0xB4, 0x8B,
]


AES = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


SMS4=[0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48]

Camellia=[112,130, 44,236,179, 39,192,229,228,133, 87, 53,234, 12,174, 65,
         35,239,107,147, 69, 25,165, 33,237, 14, 79, 78, 29,101,146,189,
        134,184,175,143,124,235, 31,206, 62, 48,220, 95, 94,197, 11, 26,
        166,225, 57,202,213, 71, 93, 61,217,  1, 90,214, 81, 86,108, 77,
        139, 13,154,102,251,204,176, 45,116, 18, 43, 32,240,177,132,153,
        223, 76,203,194, 52,126,118,  5,109,183,169, 49,209, 23,  4,215,
         20, 88, 58, 97,222, 27, 17, 28, 50, 15,156, 22, 83, 24,242, 34,
        254, 68,207,178,195,181,122,145, 36,  8,232,168, 96,252,105, 80,
        170,208,160,125,161,137, 98,151, 84, 91, 30,149,224,255,100,210,
         16,196,  0, 72,163,247,117,219,138,  3,230,218,  9, 63,221,148,
        135, 92,131,  2,205, 74,144, 51,115,103,246,243,157,127,191,226,
         82,155,216, 38,200, 55,198, 59,129,150,111, 75, 19,190, 99, 46,
        233,121,167,140,159,110,188,142, 41,245,249,182, 47,253,180, 89,
        120,152,  6,106,231, 70,113,186,212, 37,171, 66,136,162,141,250,
        114,  7,185, 85,248,238,172, 10, 54, 73, 42,104, 60, 56,241,164,
         64, 40,211,123,187,201, 67,193, 21,227,173,244,119,199,128,158]

Kuznyechik=[
	0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16,
	0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
	0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA,
	0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
	0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21,
	0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
	0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0,
	0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
	0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB,
	0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
	0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12,
	0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
	0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7,
	0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
	0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E,
	0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
	0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9,
	0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
	0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC,
	0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
	0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44,
	0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
	0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F,
	0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
	0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7,
	0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
	0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE,
	0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
	0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B,
	0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
	0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0,
	0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6]


# print(", ".join(f"0x{val:X}" for val in x))
# print(", ".join(f"0x{val:X}" for val in a))
#
# print(f"[{', '.join(f'0x{val:X}' for val in a)}]")
# #

def calculate_bct(s_box,n):
    inverted_s_box = invert_sbox(s_box)

    bct_table = [[0 for _ in range(2**n)] for _ in range(2**n)]

    for a in range(2**n):
        for b in range(2**n):
            bct_value = 0
            for x in range(2**n):
                if inverted_s_box[s_box[x] ^ b] ^ inverted_s_box[s_box[x ^ a] ^ b] == a:
                    bct_value += 1
            bct_table[a][b] = bct_value

    return bct_table

def calculate_fbct(s_box,n):
    inverted_s_box = invert_sbox(s_box)

    fbct_table = [[0 for _ in range(2**n)] for _ in range(2**n)]

    for a in range(2**n):
        for b in range(2**n):
            fbct_value = 0
            for x in range(2**n):
                if s_box[x] ^ s_box[x ^ a] ^ s_box[x ^ b] ^ s_box[x ^ a ^ b] == 0:
                    fbct_value += 1
            fbct_table[a][b] = fbct_value

    return fbct_table
def invert_sbox(s_box):
    inverted_s_box = [0] * len(s_box)
    for i, value in enumerate(s_box):
        inverted_s_box[value] = i
    return inverted_s_box

# Ví dụ sử dụng
SBOX=MKV    # MKV, AES, SMS4, Camellia, Kuznyechik

INVSBOX=invert_sbox(SBOX)
n = 8


# Calculate BCT for the example S-box
bct_table = calculate_bct(SBOX,n)
fbct_table = calculate_fbct(SBOX,n)



# def print_table(table):
#     for row in table:
#         formatted_row = [f"{value:2}" for value in row]  #
#         print(" ".join(formatted_row))
def print_table(table):
    # In tiêu đề cột (b)
    print("    " + " ".join(f"{j:3}" for j in range(len(table[0]))))
    for i, row in enumerate(table):
        formatted_row = [f"{value:3}" for value in row]
        print(f"{i:3} " + " ".join(formatted_row))  # in chỉ số hàng (a)

# Print the BCT Table
print("\n BCT Table:")
print_table(bct_table)

# Print the FBCT Table
print("\n FBCT Table:")
print_table(fbct_table)

def count_even_values(table):
    even_count = [0] * 129  #
    for row in table:
        for value in row:
            if value % 2 == 0:
                even_count[value // 2] += 1  # Increase the count of even value at the corresponding index in the array
    return even_count

# Print the count of even values in the BCT Table
even_count_bct = count_even_values(bct_table)
print("\n Count of even values in BCT Table:")
for value, count in enumerate(even_count_bct):
    print(f"\n Count of value {value * 2}: {count}")

# Print the count of even values in the FBCT Table
even_count_fbct = count_even_values(fbct_table)
print("\n Count of even values in FBCT Table:")
for value, count in enumerate(even_count_fbct):
    print(f"\n Count of value {value * 2}: {count}")
def compute_second_largest_bct_fbct(s_box, n):
    def invert_sbox(s_box):
        inverted_s_box = [0] * len(s_box)
        for i, value in enumerate(s_box):
            inverted_s_box[value] = i
        return inverted_s_box

    def calculate_bct(s_box, n):
        inverted_s_box = invert_sbox(s_box)
        bct_table = [[0 for _ in range(2**n)] for _ in range(2**n)]

        for a in range(2**n):
            for b in range(2**n):
                bct_value = 0
                for x in range(2**n):
                    if inverted_s_box[s_box[x] ^ b] ^ inverted_s_box[s_box[x ^ a] ^ b] == a:
                        bct_value += 1
                bct_table[a][b] = bct_value

        return bct_table

    def calculate_fbct(s_box, n):
        fbct_table = [[0 for _ in range(2**n)] for _ in range(2**n)]

        for a in range(2**n):
            for b in range(2**n):
                fbct_value = 0
                for x in range(2**n):
                    if s_box[x] ^ s_box[x ^ a] ^ s_box[x ^ b] ^ s_box[x ^ a ^ b] == 0:
                        fbct_value += 1
                fbct_table[a][b] = fbct_value

        return fbct_table

    def find_second_largest_value(table):
        largest_value = second_largest_value = float('-inf')

        for row in table:
            for value in row:
                if value > largest_value:
                    second_largest_value = largest_value
                    largest_value = value
                elif value > second_largest_value and value < largest_value:
                    second_largest_value = value

        return second_largest_value

    # Tính toán BCT và FBCT
    bct_table = calculate_bct(SBOX, n)
    fbct_table = calculate_fbct(SBOX, n)

    # Tìm giá trị lớn thứ hai
    second_largest_bct_value = find_second_largest_value(bct_table)
    second_largest_fbct_value = find_second_largest_value(fbct_table)

    return second_largest_bct_value, second_largest_fbct_value


second_largest_bct_value, second_largest_fbct_value = compute_second_largest_bct_fbct(SBOX, n)
print(f"\n Second Largest BCT value: {second_largest_bct_value}")
print(f"\nSecond Largest FBCT value: {second_largest_fbct_value}")
